1.

int putere(int n, int p)
{
    int ok=1;
    if(p!=2&&p%2==0||p<2) ok=0;
    else
        for(int d=3;d*d<=p;d+=2) if(p%d==0) ok=0;
    
    if(ok==0) return -1;
    else
    {
        int put=0;
        while(n%p==0)
            n/=p,put++;
        return put;
    }
    return -1;
}

2.

#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

int main() {
    int m, n;
    cout << "Introduceti numarul de linii (m): ";
    cin >> m;
    cout << "Introduceti numarul de coloane (n): ";
    cin >> n;

    // Declarați tabloul bidimensional
    vector<vector<int>> tabel(m, vector<int>(n));

    // Citirea elementelor tabloului
    cout << "Introduceti elementele tabloului:" << endl;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cin >> tabel[i][j];
        }
    }

    // Seturi pentru a stoca elementele din prima si ultima coloana
    unordered_set<int> primaColoana;
    unordered_set<int> ultimaColoana;

    for (int i = 0; i < m; i++) {
        primaColoana.insert(tabel[i][0]);
        ultimaColoana.insert(tabel[i][n - 1]);
    }

    // Găsirea valorilor comune
    vector<int> valoriComune;
    for (const int& val : primaColoana) {
        if (ultimaColoana.find(val) != ultimaColoana.end()) {
            valoriComune.push_back(val);
        }
    }

    // Afișarea rezultatelor
    cout << "Valorile care polarizeaza cele doua siruri sunt:" << endl;
    if (valoriComune.empty()) {
        cout << "Nu exista valori comune." << endl;
    } else {
        for (const int& val : valoriComune) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}


3.

#include <iostream>
#include <fstream>
#include <climits>

using namespace std;

int main() {
    ifstream file("numere.in");
    if (!file) {
        cerr << "Nu s-a putut deschide fișierul." << endl;
        return 1;
    }

    long long current_min_sum = 0;
    long long global_min_sum = LLONG_MAX;
    long long numar;

    while (file >> numar) {
        // Calculăm suma minimă a subsecvenței până la acest punct
        if (current_min_sum > 0) {
            current_min_sum = numar;
        } else {
            current_min_sum += numar;
        }

        // Actualizăm suma minimă globală dacă este necesar
        if (current_min_sum < global_min_sum) {
            global_min_sum = current_min_sum;
        }
    }

    file.close();

    cout << "Suma minimă obținută din numere consecutive este: " << global_min_sum << endl;

    return 0;
}
