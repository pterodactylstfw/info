
Karatsuba(A, B):
    Dacă lungimea lui A sau B este mică, întoarce produsul clasic.
    Împarte A și B în jumătăți: A1, A0 și B1, B0.
    P1 = Karatsuba(A1, B1)
    P2 = Karatsuba(A0, B0)
    P3 = Karatsuba(A1 + A0, B1 + B0)
    Return P1 * 10^(2m) + (P3 - P1 - P2) * 10^m + P2


Complexitate
Timp de execuție:
Algoritmul clasic implică 
O(n^2) operații de înmulțire.
Karatsuba reduce numărul de înmulțiri la 3, iar complexitatea recursivă este:
T(n) = 3T(n/2) + O(n)
Spațiu:
Necesită spațiu suplimentar pentru stocarea subproblemelor și a rezultatelor intermediare.

int get_size(long);
long karatsuba(long X, long Y){
   
   // Base Case
   if (X < 10 && Y < 10)
      return X * Y;
   
   // determine the size of X and Y
   int size = fmax(get_size(X), get_size(Y));
   if(size < 10)
      return X * Y;
   
   // rounding up the max length
   size = (size/2) + (size%2);
   long multiplier = pow(10, size);
   long b = X/multiplier;
   long a = X - (b * multiplier);
   long d = Y / multiplier;
   long c = Y - (d * size);
   long u = karatsuba(a, c);
   long z = karatsuba(a + b, c + d);
   long v = karatsuba(b, d);
   return u + ((z - u - v) * multiplier) + (v * (long)(pow(10, 2 * size)));
}
int get_size(long value){
   int count = 0;
   while (value > 0) {
      count++;
      value /= 10;
   }
   return count;
}