int partition(std::vector<int>& arr, int low, int high, std::function<bool(int, int)> comparator) {
    int pivot = arr[high]; // Alegem pivotul ca fiind ultimul element
    int i = low - 1;       // Indice pentru elementele mai mici decât pivotul

    for (int j = low; j < high; ++j) {
        // Dacă elementul curent respectă condiția comparatorului față de pivot
        if (comparator(arr[j], pivot)) {
            ++i;
            std::swap(arr[i], arr[j]); // Mutăm elementul curent pe poziția corectă
        }
    }

    // Mutăm pivotul la poziția corectă
    std::swap(arr[i + 1], arr[high]);
    return i + 1; // Returnăm poziția pivotului
}
// Funcție de comparator pentru sortare crescătoare
bool comparatorCrescator(int a, int b) {
    return a < b; // Elementul a este mai mic decât b
}

// Funcție de comparator pentru sortare descrescătoare
bool comparatorDescrescator(int a, int b) {
    return a > b; // Elementul a este mai mare decât b
}


// Funcția recursivă Quicksort
void quicksort(std::vector<int>& arr, int low, int high, bool (*comparator)(int, int)) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high, comparator); // Obținem indexul pivotului
        quicksort(arr, low, pivotIndex - 1, comparator);        // Sortăm partea stângă
        quicksort(arr, pivotIndex + 1, high, comparator);       // Sortăm partea dreaptă
    }
}

// Funcție de afișare
void afisare(const std::vector<int>& arr) {
    for (const auto& elem : arr) {
        std::cout << elem << " ";
    }
    std::cout << '\n';
}

// Main pentru testare
int main() {
    std::vector<int> arr = {3, 6, 8, 10, 1, 2, 1};

    std::cout << "Vectorul initial: ";
    afisare(arr);

    
    
    // Sortare crescătoare
    quicksort(arr, 0, arr.size() - 1, comparatorCrescator);
    std::cout << "Vectorul sortat crescator: ";
    afisare(arr);

    // Comparator pentru sortare descrescătoare
    std::function<bool(int, int)> comparatorDescrescator = [](int a, int b) {
        return a > b; // Sortare descrescătoare
    };
    
    // Sortare descrescătoare
    quicksort(arr, 0, arr.size() - 1, comparatorDescrescator);
    std::cout << "Vectorul sortat descrescator: ";
    afisare(arr);

    return 0;
}