/*
1. Se da un sir de numere intregi, pozitive si negative. Sa se gaseasca cele doua elemente
pentru care suma lor este cea mai apropiata de 0.
*/

#include <iostream>
#include <vector>

std::vector<int> citire() {
	int dim;
	std::cin >> dim;
	std::vector<int> v;
	v.resize(dim);
	for (int i = 0; i < v.size(); i++) {
		std::cin >> v[i];
	}
	return v;
}

int valoareAbsoluta(int a) {
	if (a < 0)return 0 - a;
	return a;
}

bool comparatorValoareAbsoluta(int a, int b) {
	return (valoareAbsoluta(a) < valoareAbsoluta(b));
}

void quicksort(std::vector<int>& v, int st, int dr, bool comparator(int, int)) {
	if (st < dr) {
		int piv = v[(st + dr) / 2];
		int i = st, j = dr;
		while (i <= j) {
			while (comparator(v[i], piv))i++;
			while (comparator(piv, v[j]))j--;
			if (i <= j) {
				int aux = v[i];
				v[i] = v[j];
				v[j] = aux;
				i++;
				j--;
			}
		}
		quicksort(v, st, j, comparator);
		quicksort(v, i, dr, comparator);
	}
}

int sumaCeaMaiApropiataDeZero(std::vector<int> v) {
	// functia returneaza pozitia a doua a perechii cautate din vectorul sortat v
	int sApropiat = v[1] + v[0], modulSApropiat = valoareAbsoluta(sApropiat), poz = 1;
	for (int i = 2; i < v.size(); i++) {
		if (valoareAbsoluta(v[i] + v[i - 1]) < modulSApropiat) {
			sApropiat = v[i] + v[i - 1];
			modulSApropiat = valoareAbsoluta(sApropiat);
			poz = i;
		}
	}
	return poz;
}

int main() {
	std::vector<int> v = citire();
	quicksort(v, 0, v.size() - 1, comparatorValoareAbsoluta);
	int poz = sumaCeaMaiApropiataDeZero(v);
	std::cout << v[poz - 1] << " " << v[poz];
}