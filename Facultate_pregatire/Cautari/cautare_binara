// Cautare binara iterativa simpla

#include <iostream>
#include <vector>

std::vector<int> citire() {
	int dim;
	std::cin >> dim;
	std::vector<int> v(dim);
	for (int i = 0; i < dim; i++) {
		std::cin >> v[i];
	}
	return v;
}

void afisare(std::vector<int> v) {
	for (int i = 0; i < v.size(); i++) {
		std::cout << v[i] << " ";
	}
	std::cout << '\n';
}

bool comparatorCrescator(int x, int y) {
	return x < y;
}

bool comparatorDescrescator(int x, int y) {
	return x > y;
}

void quicksort(std::vector<int>& v, int st, int dr, bool comparator(int, int)) {
	if (st < dr) {
		int piv = v[(st + dr) / 2];
		int i = st, j = dr;
		while (i <= j) {
			while (comparator(v[i], piv))i++;
			while (comparator(piv, v[j]))j--;
			if (i <= j) {
				int aux = v[i];
				v[i] = v[j];
				v[j] = aux;
				i++;
				j--;
			}
		}
		quicksort(v, st, j, comparator);
		quicksort(v, i, dr, comparator);
	}
}

bool cautareBinara(std::vector<int> v, int x) {
	int st = 0, dr = v.size() - 1;
	while (st <= dr) {
		int m = (st + dr) / 2;
		if (v[m] == x) return 1; // m pentru pozitie
		else if (v[m] < x) st = m + 1;
		else dr = m - 1;
	}
	return 0; // -1 pentru pozitie
}

int main() {
	std::vector<int> v = citire();
	quicksort(v, 0, v.size() - 1, comparatorCrescator);
	int x;
	std::cin >> x;
	std::cout << cautareBinara(v, x);
	// afisare(v);
}


//Cautare binara recursiva 

#include <iostream>
#include <vector>

std::vector<int> citire() {
	int dim;
	std::cin >> dim;
	std::vector<int> v(dim);
	for (int i = 0; i < dim; i++) {
		std::cin >> v[i];
	}
	return v;
}

void afisare(std::vector<int> v) {
	for (int i = 0; i < v.size(); i++) {
		std::cout << v[i] << " ";
	}
	std::cout << '\n';
}

bool comparatorCrescator(int x, int y) {
	return x < y;
}

bool comparatorDescrescator(int x, int y) {
	return x > y;
}

void quicksort(std::vector<int>& v, int st, int dr, bool comparator(int, int)) {
	if (st < dr) {
		int piv = v[(st + dr) / 2];
		int i = st, j = dr;
		while (i <= j) {
			while (comparator(v[i], piv))i++;
			while (comparator(piv, v[j]))j--;
			if (i <= j) {
				int aux = v[i];
				v[i] = v[j];
				v[j] = aux;
				i++;
				j--;
			}
		}
		quicksort(v, st, j, comparator);
		quicksort(v, i, dr, comparator);
	}
}

int cautBin(const std::vector<int>& a, int st, int dr, int x) {
    // Explicații: efectuează o căutare binară pentru elementul x
    if (st > dr) return 0; // Dacă intervalul este invalid, x nu este găsit
    if (st == dr) {
        if (a[st] == x) return 1; // Dacă elementul x este găsit la st, returnează 1
        else return 0; // Dacă elementul x nu este găsit
    }

    int mij = (st + dr) / 2; // Găsim mijlocul intervalului
    if (a[mij] == x) return 1; // Dacă elementul x este la mijloc, returnează 1
    else if (a[mij] < x) return cautBin(a, mij + 1, dr, x); // Căutăm în partea dreaptă
    else return cautBin(a, st, mij - 1, x); // Căutăm în partea stângă
}


int main() {
	std::vector<int> v = citire();
	quicksort(v, 0, v.size() - 1, comparatorCrescator);
	int x;
	std::cin >> x;
	std::cout << cautBin(v,0, v.size()-1, x);
	// afisare(v);
}


// Cautare binara descrescatoare

int cautBin(const std::vector<int>& a, int st, int dr, int x) {
    // Explicații: efectuează o căutare binară pentru elementul x într-un vector descrescător
    if (st > dr) return 0; // Dacă intervalul este invalid, x nu este găsit
    if (st == dr) {
        if (a[st] == x) return 1; // Dacă elementul x este găsit la st, returnează 1
        else return 0; // Dacă elementul x nu este găsit
    }

    int mij = (st + dr) / 2; // Găsim mijlocul intervalului
    if (a[mij] == x) return 1; // Dacă elementul x este la mijloc, returnează 1
    else if (a[mij] > x) return cautBin(a, mij + 1, dr, x); // Căutăm în partea dreaptă
    else return cautBin(a, st, mij - 1, x); // Căutăm în partea stângă
}