/*
2. Modifica algoritmul de sortare prin insertie astfel incat sa foloseasca cautarea binara
pentru a afla pozitia unde noua inserare ar trebui sa aibe loc.
*/

#include <iostream>
#include <vector>

std::vector<int> citire() {
	int dim;
	std::cin >> dim;
	std::vector<int> v;
	v.resize(dim);
	for (int i = 0; i < v.size(); i++) {
		std::cin >> v[i];
	}
	return v;
}

void afisare(std::vector<int> v) {
	for (int i = 0; i < v.size(); i++) {
		std::cout << v[i] << " ";
	}
	std::cout << '\n';
}

int altfelDeCautareBinara(std::vector<int> v, int st, int dr, int x) {
	while (st <= dr) {
		int m = (st + dr) / 2;
		if (v[m] == x)return m;
		if (v[m] < x) {
			st = m + 1;
		}
		else dr = m - 1;
	}
	return st;
}

void insertionSort(std::vector<int>& v) {
	for (int i = 1; i < v.size(); i++) {
		int poz = altfelDeCautareBinara(v, 0, i - 1, v[i]);
		int aux = v[i];
		for (int j = i; j > poz; j--) {
			v[j] = v[j - 1];
		}
		v[poz] = aux;
	}
}

int main() {
	std::vector<int> v = citire();
	insertionSort(v);
	afisare(v);
}