//Algoritmi de sortare - C++

//1. Bubble Sort 

void bubbleSort(vector<int>& v) {
 
    int n = v.size();

    for (int i = 0; i < n - 1; i++) {

        // Creating a flag to denote the case wwhen array
        // is sorted and doesnt cause any swap
        bool flag = false;
        for (int j = 0; j < n - i - 1; j++) {
            if (v[j] > v[j + 1]) {
                swap(v[j], v[j + 1]);
              
                  // Setting flag true when swap happened
                flag = true;
            }
        }
      
          // Checking if the flag is set or not
        if (!flag)
            break;
    }
}

----------------------------------------------------------------------------------------------------------------

2. Quick Sort 
    
int partition(vector<int> &vec, int st, int dr) {

    // Selecting last element as the pivot
    int pivot = vec[dr];

    // Index of elemment just before the last element
    // It is used for swapping
    int i = (st - 1);

    for (int j = st; j <= dr - 1; j++) {

        // If current element is smaller than or
        // equal to pivot
        if (vec[j] <= pivot) {
            i++;
            swap(vec[i], vec[j]);
        }
    }

    // Put pivot to its position
    swap(vec[i + 1], vec[dr]);

    // Return the point of partition
    return (i + 1);
}

void quickSort(vector<int> &vec, int st, int dr) {

    // Base case: This part will be executed till the starting
    // index st is lesser than the ending index dr
    if (st < dr) {

        // pi is Partitioning Index, arr[p] is now at
        // right place
        int pvt = partition(vec, st, dr);

        // Separately sort elements before and after the
        // Partition Index pi
        quickSort(vec, st, pvt - 1);
        quickSort(vec, pvt + 1, dr);
    }
}

----------------------------------------------------------------------------------------------------------------

3. Merge Sort 

void merge(std::vector<int>& v, int st, int m, int dr) {
    std::vector<int> tmp(dr - st + 1);
    int i = st, j = m + 1, k = 0;

    while (i <= m && j <= dr) {
        if (v[i] < v[j])
            tmp[k++] = v[i++];
        else
            tmp[k++] = v[j++];
    }

    while (i <= m) {
        tmp[k++] = v[i++];
    }

    while (j <= dr) {
        tmp[k++] = v[j++];
    }

    for (int i = st, k = 0; i <= dr; ++i, ++k) {
        v[i] = tmp[k];
    }
}

void mergeSort(std::vector<int>& v, int st, int dr) {
    if (st < dr) {
        int m = (st + dr) / 2;
        mergeSort(v, st, m);
        mergeSort(v, m + 1, dr);
        merge(v, st, m, dr);
    }
}

4. Insertion Sort 

void insertionSort(std::vector<int>& v) {
    int n = v.size();
    for (int i = 1; i < n; ++i) {
        int key = v[i];
        int j = i - 1;

        // Mutăm elementele din v[0...i-1] care sunt mai mari decât `key`
        // o poziție în față pentru a face loc pentru `key`.
        while (j >= 0 && v[j] > key) {
            v[j + 1] = v[j];
            j--;
        }
        v[j + 1] = key;
    }
}

----------------------------------------------------------------------------------------------------------------


5. Selection Sort 

void selectionSort(std::vector<int>& v) {
    int n = v.size();
    for (int i = 0; i < n - 1; ++i) {
        // Presupunem că elementul minim este primul din porțiunea nesortată
        int minIndex = i;

        // Căutăm elementul minim în porțiunea nesortată
        for (int j = i + 1; j < n; ++j) {
            if (v[j] < v[minIndex]) {
                minIndex = j;
            }
        }

        // Schimbăm elementul curent cu elementul minim găsit
        if (minIndex != i) {
            std::swap(v[i], v[minIndex]);
        }
    }
}

----------------------------------------------------------------------------------------------------------------