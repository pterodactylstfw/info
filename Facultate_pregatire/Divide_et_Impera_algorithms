Cautare binara recursiva

int cautBin(const std::vector<int>& a, int st, int dr, int x) {
    // Explicații: efectuează o căutare binară pentru elementul x
    if (st > dr) return 0; // Dacă intervalul este invalid, x nu este găsit
    if (st == dr) {
        if (a[st] == x) return 1; // Dacă elementul x este găsit la st, returnează 1
        else return 0; // Dacă elementul x nu este găsit
    }

    int mij = (st + dr) / 2; // Găsim mijlocul intervalului
    if (a[mij] == x) return 1; // Dacă elementul x este la mijloc, returnează 1
    else if (a[mij] < x) return cautBin(a, mij + 1, dr, x); // Căutăm în partea dreaptă
    else return cautBin(a, st, mij - 1, x); // Căutăm în partea stângă
}


Cautare binara clasica

int cautBin(const std::vector<int>& a, int x) {
    int st = 0;                // Indicele de început
    int dr = a.size() - 1;     // Indicele de sfârșit

    while (st <= dr) {
        int mij = st + (dr - st) / 2;  // Găsim mijlocul intervalului
        
        if (a[mij] == x) {
            return mij;  // Dacă elementul este găsit, returnăm indexul său
        }
        else if (a[mij] < x) {
            st = mij + 1;  // Dacă elementul este mai mare, căutăm în partea dreaptă
        }
        else {
            dr = mij - 1;  // Dacă elementul este mai mic, căutăm în partea stângă
        }
    }

    return -1;  // Dacă nu găsim elementul, returnăm -1
}

Funcție recursivă pentru calcularea sumei elementelor unui 
vector folosind divide et impera

int suma(const std::vector<int>& a, int st, int dr) {
    // Cazul de bază: dacă vectorul are un singur element
    if (st == dr) {
        return a[st];
    }
    
    // Calculăm mijlocul intervalului
    int mij = st + (dr - st) / 2;

    // Divizăm problema în două părți: stânga și dreapta
    int sumaStanga = suma(a, st, mij);
    int sumaDreapta = suma(a, mij + 1, dr);

    // Combina rezultatele din cele două jumătăți
    return sumaStanga + sumaDreapta;
}


Sortare prima jumatate crescator, a doua jumatate descrescator

bool comparatorCrescator(int a, int b) {
    return a < b;
}

// Functie de comparator pentru sortare descrescatoare
bool comparatorDescrescator(int a, int b) {
    return a > b;
}

// Functie de pivotare pentru Quicksort
int pivot(std::vector<int>& v, int st, int dr, bool (*comparator)(int, int)) {
    int piv = v[dr];  // Alegem elementul din dreapta ca pivot
    int i = st - 1;
    
    // Iteram prin vector si plasam elementele mai mici la stanga si cele mai mari la dreapta pivotului
    for (int j = st; j < dr; ++j) {
        if (comparator(v[j], piv)) {  // Comparam cu pivotul folosind comparatorul
            ++i;
            std::swap(v[i], v[j]);
        }
    }
    std::swap(v[i + 1], v[dr]);
    return i + 1;
}

// Functie de Quicksort
void quicksort(std::vector<int>& v, int st, int dr, bool (*comparator)(int, int)) {
    if (st < dr) {
        int p = pivot(v, st, dr, comparator);  // Gasim pozitia pivotului
        quicksort(v, st, p - 1, comparator);  // Sortam partea stanga
        quicksort(v, p + 1, dr, comparator);  // Sortam partea dreapta
    }
}

void sorteazaVector(std::vector<int>& v) {
    int dim = v.size();
    int mijloc = dim / 2;

    // Sortează prima jumătate crescător
    quicksort(v, 0, mijloc - 1, comparatorCrescator);

    // Sortează a doua jumătate descrescător
    quicksort(v, mijloc, dim - 1, comparatorDescrescator);
}



Maximul din vector convex (ordonat crescator pana la o pozitie apoi descrescator)

// Funcție Divide et Impera pentru găsirea maximului
int gasesteMaxim(const std::vector<int>& v, int st, int dr) {
    if (st == dr) {
        return v[st];  // Un singur element, acesta este maximul
    }

    int mij = st + (dr - st) / 2;

    // Verificăm relația între elementul de mijloc și vecinul său
    if (v[mij] > v[mij + 1]) {
        // Maximul este în stânga (inclusiv mijlocul)
        return gasesteMaxim(v, st, mij);
    } else {
        // Maximul este în dreapta
        return gasesteMaxim(v, mij + 1, dr);
    }
}


// Funcție recursivă Divide et Impera pentru căutarea lui k intr-o matrice
bool cautaInMatrice(const std::vector<std::vector<int>>& matrice, int stRow, int drRow, int stCol, int drCol, int k) {
    // Dacă submatricea este invalidă, returnăm false
    if (stRow > drRow || stCol > drCol) {
        return false;
    }

    // Determinăm elementul pivot
    int midRow = stRow + (drRow - stRow) / 2;
    int midCol = stCol + (drCol - stCol) / 2;
    int pivot = matrice[midRow][midCol];

    // Verificăm pivotul
    if (pivot == k) {
        return true; // Elementul a fost găsit
    } else if (pivot < k) {
        // Continuăm căutarea în 2 submatrice:
        // 1. Dreapta pivotului
        // 2. Jos de pivot
        return cautaInMatrice(matrice, midRow + 1, drRow, stCol, drCol, k) ||
               cautaInMatrice(matrice, stRow, drRow, midCol + 1, drCol, k);
    } else {
        // Continuăm căutarea în 2 submatrice:
        // 1. Stânga pivotului
        // 2. Sus de pivot
        return cautaInMatrice(matrice, stRow, midRow - 1, stCol, drCol, k) ||
               cautaInMatrice(matrice, midRow, drRow, stCol, midCol - 1, k);
    }
}



// Funcție recursivă Divide et Impera pentru găsirea numărului lipsă in vector ord cresc 
// ce contine toate numerele de la 0 la n-1
int gasesteNumarLipsa(const std::vector<int>& v, int st, int dr) {
    if (st > dr) {
        return st; // Numărul lipsă este pe poziția st
    }

    int mij = st + (dr - st) / 2;

    if (v[mij] == mij) {
        // Numărul lipsă este în dreapta
        return gasesteNumarLipsa(v, mij + 1, dr);
    } else {
        // Numărul lipsă este în stânga
        return gasesteNumarLipsa(v, st, mij - 1);
    }
}


Problema cu biblioteca si rafturile

struct Carte{
    std::string titlu;
    int an_ap;
};


std::vector<std::vector<Carte>> citire()
{
    std::ifstream fin("date.txt");
    if (!fin.is_open()) {
        std::cerr << "Eroare: Nu pot deschide fisierul 'date.txt'!" << std::endl;
        return {};
    }

    std::vector<std::vector<Carte>> rafturi;
    std::string raft;

    while (getline(fin, raft)) {
        std::istringstream is(raft);
        std::string carte;
        std::vector<Carte> carti_pe_raft;

        while (getline(is, carte, ';')) {
            std::istringstream iss(carte);
            Carte c;
            getline(iss, c.titlu, ',');
            iss >> c.an_ap;

            
            carti_pe_raft.push_back(c);
        }

        rafturi.push_back(carti_pe_raft);
    }

    return rafturi;
}

void afisare(std::vector<std::vector<Carte>> v)
{
    for(auto elem: v)
        for(auto carte: elem)
            std::cout<<carte.an_ap<<" "<<carte.titlu<<'\n';
        
}

bool comparator(Carte a, Carte b)
{
    if(a.an_ap!= b.an_ap)
        return a.an_ap < b.an_ap;
    
    return a.titlu < b.titlu;
}

bool verificare_sortare_raft(std::vector<Carte> raft, bool comparator (Carte a, Carte b), int st, int dr)
{
    if(st>=dr) return true;

    int mij = (st+dr)/2;
    
    bool stangaSort =verificare_sortare_raft(raft, comparator, st, mij);
    
    bool dreaptaSort = verificare_sortare_raft(raft, comparator, mij+1, dr);
    bool granita = comparator(raft[mij], raft[mij+1]);
    
    return stangaSort&&dreaptaSort&&granita;
        
}

void verif_sort_biblioteca( std::vector<std::vector<Carte>> bibl)
{
    for(int i=0; i< bibl.size();i++)
    {if(verificare_sortare_raft(bibl[i], comparator, 0, bibl[i].size()-1))
    {std::cout<<"Raftul este sortat"<<'\n';
        }
        
    else {std::cout<<"Raftul nu este sortat!";
        }
    }
    
}
