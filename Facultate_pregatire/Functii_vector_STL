Citire vectori STL

#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
    
    
std::ifstream fin("date.txt");
    
std::vector<int> citire()
{
        std::vector<int> vect;
        int n;
        
        std::cin>>n;
        
        vect.resize(n);
        
        for(int i=0;i<vect.size();i++)
            std::cin>>vect[i];
        
        return vect;
}


Afisare vector STL 

void afisare(std::vector<int> vect)
{
        for(const auto& elem: vect)
            std::cout<<elem<<" ";
        std::cout<<'\n';
}


Inserare pe pozitia k a elementului x in vector STL 

void inserare(std::vector<int>& vect, int k, int x) {
    // Verificăm dacă poziția k este validă
    if (k < 0 || k > vect.size()) {
        std::cout << "Pozitia nu este valida!\n";
        return;
    }

    // Creștem dimensiunea vectorului pentru a face loc noului element
    vect.push_back(0); // Adăugăm un element temporar la final

    // Mutăm elementele de la poziția k în sus cu o poziție
    for (int i = vect.size() - 1; i > k; --i) {
        vect[i] = vect[i - 1];
    }

    // Inserăm elementul pe poziția k
    vect[k] = x;
}

Stergerea elementului de pe pozitia k din vector STL 

void stergere(std::vector<int>& vect, int k) {
    // Verificăm dacă poziția k este validă
    if (k < 0 || k >= vect.size()) {
        std::cout << "Pozitia nu este valida!\n";
        return;
    }

    // Mutăm elementele de la poziția k în jos cu o poziție
    for (int i = k; i < vect.size() - 1; ++i) {
        vect[i] = vect[i + 1];
    }

    // Reducem dimensiunea vectorului
    vect.resize(vect.size() - 1);
}

Suma celor 2 numere cu suma cel mai aproape de 0

void gasesteCeleMaiAproapeSume(std::vector<int>& nums) {
    // 1. Sortăm șirul de numere
    std::sort(nums.begin(), nums.end());
    
    int n = nums.size();
    int left = 0, right = n - 1;
    int sumaMinima = INT_MAX;  // Folosim INT_MAX pentru a semnala suma cea mai mare initial
    int numar1 = 0, numar2 = 0;

    // 2. Căutăm cele două numere cu suma cea mai apropiată de 0
    while (left < right) {
        int suma = nums[left] + nums[right];

        // Dacă suma este mai apropiată de 0, o actualizăm
        if (std::abs(suma) < std::abs(sumaMinima)) {
            sumaMinima = suma;
            numar1 = nums[left];
            numar2 = nums[right];
        }

        // Mutați pointerii în funcție de suma obținută
        if (suma < 0) {
            left++;
        } else {
            right--;
        }
    }

    // 3. Afișăm rezultatul
    std::cout << "Cele doua numere cu suma cea mai apropiata de 0 sunt: " << numar1 << " si " << numar2 << std::endl;
    std::cout << "Suma lor este: " << sumaMinima << std::endl;
}


Verif a[i]+b[i] >= k


bool reorganize(std::vector<int>& a, std::vector<int>& b, int k) {
    // 1. Sortăm vectorul a în ordine crescătoare
    std::sort(a.begin(), a.end());
    
    // 2. Sortăm vectorul b în ordine descrescătoare
    std::sort(b.rbegin(), b.rend());

    // 3. Verificăm dacă a[i] + b[i] >= k pentru toate i
    for (size_t i = 0; i < a.size(); ++i) {
        if (a[i] + b[i] < k) {
            return false;  // Dacă pentru vreun i suma nu satisface condiția, returnează false
        }
    }
    return true;  // Dacă toate perechile satisfac condiția, returnează true
}


Verif daca vector contine subvector

Construirea tabelului de failure:
Tabelul de failure ne ajută să "sărim" pe elemente atunci când găsim o nepotrivire,
economisind timp și evitând comparațiile inutile.

Căutarea subsecvenței:
Folosim două indicatoare: i pentru primul vector și j pentru al doilea vector. 
Dacă găsim o potrivire, continuăm să comparăm elementele. Dacă găsim o neconcordanță, 
folosim tabelul de failure pentru a sări la o poziție corespunzătoare.

void construireTabelFailure(const std::vector<int>& b, std::vector<int>& failure) {
    int m = b.size();
    failure[0] = -1;
    int k = -1;
    
    for (int i = 1; i < m; ++i) {
        while (k >= 0 && b[k + 1] != b[i]) {
            k = failure[k];
        }
        if (b[k + 1] == b[i]) {
            k++;
        }
        failure[i] = k;
    }
}

// Functie pentru verificarea daca b este subsecventa a lui a
bool contineSubvector(const std::vector<int>& a, const std::vector<int>& b) {
    int n = a.size();
    int m = b.size();
    std::vector<int> failure(m);
    
    // Construim tabelul de failure pentru b
    construireTabelFailure(b, failure);
    
    int i = 0, j = 0;
    
    while (i < n) {
        if (a[i] == b[j]) {
            i++;
            j++;
            if (j == m) {
                return true;  // Am gasit subsecventa
            }
        } else {
            if (j > 0) {
                j = failure[j - 1];
            } else {
                i++;
            }
        }
    }
    
    return false;
}



Sortare numai palindroame din vector 

void sorteazaPalindroame(std::vector<int>& v) {
    std::vector<int> palindroame;
    
    // Extragem palindroamele
    for (int i = 0; i < v.size(); ++i) {
        if (estePalindrom(v[i])) {
            palindroame.push_back(v[i]);
        }
    }
    
    // Sortam palindroamele
    std::sort(palindroame.begin(), palindroame.end());
    
    // Reintroducem palindroamele in vectorul original
    int j = 0;  // Index pentru palindroamele sortate
    for (int i = 0; i < v.size(); ++i) {
        if (estePalindrom(v[i])) {
            v[i] = palindroame[j++];
        }
    }
}


Interclasarea a 2 vectori 

std::vector<int> interclasare(const std::vector<int>& vec1, const std::vector<int>& vec2) {
    std::vector<int> rezultat;
    int i = 0, j = 0;

    // Comparăm elementele din cei doi vectori și le adăugăm în vectorul rezultat
    while (i < vec1.size() && j < vec2.size()) {
        if (vec1[i] < vec2[j]) {
            rezultat.push_back(vec1[i]);
            i++;
        } else {
            rezultat.push_back(vec2[j]);
            j++;
        }
    }

    // Adăugăm elementele rămase din vec1 (dacă există)
    while (i < vec1.size()) {
        rezultat.push_back(vec1[i]);
        i++;
    }

    // Adăugăm elementele rămase din vec2 (dacă există)
    while (j < vec2.size()) {
        rezultat.push_back(vec2[j]);
        j++;
    }

    return rezultat;
}
