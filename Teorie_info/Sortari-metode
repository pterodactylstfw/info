Sortarea prin SELECTIE -> a minimului (CRESCATOR)

for(int i=1;i<n;i++)
    {
        int mn=1000,p;
        for(int j=i;j<=n;j++)
            if(a[j]<mn) {mn=a[j];
            p=j;
            }

            int aux=a[i];
            a[i]=a[p];
            a[p]=aux;
    }


Sortarea prin INSERTIE -> CRESCATOR


int main()
{
    citire();
    for(int i=2;i<=n;i++)
        {
            int x=a[i],j=i-1;
            while(j>0&&x<a[j])
            {
                a[j+1]=a[j];
                j--;
                
            }
            a[j+1]=x;
        }

for(int i=1;i<=n;i++)
     cout<<a[i]<<" ";    
}


COUNTING SORT -> recomandata indicierea de la 0

int main()
{
    citire();
    int rez[50];
    for(int i=0;i<n;i++)
    {
        int p=0;
        for(int j=0;j<i;j++)
            if(a[j]<a[i]) p++;
        
        for(int j=i+1;j<n;j++)
            if(a[j]<=a[i])
                p++;
        rez[p]=a[i];
    }
    
    
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";
}


QUICK Sort 
    -> complexitate medie O(n log n)
    -> Partitioneaza vectorul in 2 parti, nu neaparat egale, in functie de un element numit
        PIVOT
        Toate elementele mai mici decat pivotul vor fi in prima parte a sirului, toate 
        elementele mai mari decat pivotul vor fi in a doua parte a sirului.
        In urma partitionarii, pivotul ajunge pe pozitia corecta in sirul sortat
